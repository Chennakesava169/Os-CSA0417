#include <stdio.h>

#define MAX_PROCESSES 10

int main()
{
    int arrival_time[MAX_PROCESSES], burst_time[MAX_PROCESSES];
    int completion_time[MAX_PROCESSES], waiting_time[MAX_PROCESSES], turnaround_time[MAX_PROCESSES];
    int remaining_time[MAX_PROCESSES];
    int n, time, shortest_job, completed = 0, total_waiting_time = 0, total_turnaround_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter the arrival time and burst time for process %d: ", i + 1);
        scanf("%d%d", &arrival_time[i], &burst_time[i]);
        remaining_time[i] = burst_time[i];
    }

    // Run the SRPT algorithm
    for (time = 0; completed != n; time++) {
        shortest_job = -1;

        for (int i = 0; i < n; i++) {
            if (arrival_time[i] <= time && remaining_time[i] > 0) {
                if (shortest_job == -1 || remaining_time[i] < remaining_time[shortest_job]) {
                    shortest_job = i;
                }
            }
        }

        remaining_time[shortest_job]--;

        if (remaining_time[shortest_job] == 0) {
            completed++;
            completion_time[shortest_job] = time + 1;
            waiting_time[shortest_job] = completion_time[shortest_job] - arrival_time[shortest_job] - burst_time[shortest_job];
            turnaround_time[shortest_job] = completion_time[shortest_job] - arrival_time[shortest_job];
            total_waiting_time += waiting_time[shortest_job];
            total_turnaround_time += turnaround_time[shortest_job];
        }
    }

    printf("Process\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, arrival_time[i], burst_time[i], completion_time[i], waiting_time[i], turnaround_time[i]);
    }

    printf("Average waiting time: %.2f\n", (float) total_waiting_time / n);
    printf("Average turnaround time: %.2f\n", (float) total_turnaround_time / n);

    return 0;
}
