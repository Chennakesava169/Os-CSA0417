#include<stdio.h>

int main()
{
    int i, j, k, n = 3, m = 3;
    int available[3] = {1, 2, 0};
    int max[3][3] = { {3, 6, 8}, {4, 3, 3}, {3, 4, 4} };
    int allocation[3][3] = { {3, 3, 3}, {2, 0, 3}, {1, 2, 4} };
    int need[3][3], work[3], finish[3], safe_sequence[3];
    int deadlock = 1;

    // Calculate the need matrix
    for(i = 0; i < n; i++)
    {
        for(j = 0; j < m; j++)
        {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Initialize the work and finish arrays
    for(i = 0; i < m; i++)
    {
        work[i] = available[i];
        finish[i] = 0;
    }

    // Find a safe sequence
    for(k = 0; k < n; k++)
    {
        for(i = 0; i < n; i++)
        {
            if(finish[i] == 0)
            {
                int can_allocate = 1;
                for(j = 0; j < m; j++)
                {
                    if(need[i][j] > work[j])
                    {
                        can_allocate = 0;
                        break;
                    }
                }

                if(can_allocate == 1)
                {
                    for(j = 0; j < m; j++)
                    {
                        work[j] += allocation[i][j];
                    }
                    finish[i] = 1;
                    safe_sequence[k] = i;
                }
            }
        }
    }

    // Check if a safe sequence was found
    for(i = 0; i < n; i++)
    {
        if(finish[i] == 0)
        {
            deadlock = 0;
            break;
        }
    }

    // Print the result
    if(deadlock == 1)
    {
        printf("The system is in a deadlock state.\n");
        printf("The deadlocked processes are: ");
        for(i = 0; i < n; i++)
        {
            if(finish[i] == 0)
            {
                printf("%d ", i);
            }
        }
    }
    else
    {
        printf("The system is not in a deadlock state.\n");
        printf("The safe sequence is: ");
        for(i = 0; i < n; i++)
        {
            printf("%d ", safe_sequence[i]);
        }
    }

    return 0;
}
